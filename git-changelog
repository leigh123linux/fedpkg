#!/usr/bin/env python
#
# git-changelog - Output a rpm changelog
#
# Copyright (C) 2009-2010  Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: David Cantrell <dcantrell@redhat.com>
# Author: Brian C. Lane <bcl@redhat.com>

import re
import subprocess
import textwrap
from argparse import ArgumentParser


class ChangeLog:
    def __init__(self, name, version):
        self.name = name
        self.version = version
        self.ignore = None

    def _getCommitDetail(self, commit, field):
        proc = subprocess.Popen(['git', 'log', '-1',
                                 "--pretty=format:%s" % field, commit],
                                universal_newlines=True,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE).communicate()

        ret = proc[0].strip('\n').split('\n')

        if len(ret) == 1 and ret[0].find('@') != -1:
            ret = ret[0].split('@')[0]
        elif len(ret) == 1:
            ret = ret[0]
        else:
            ret = filter(lambda x: x != '', ret)

        return ret

    def _extract_issue_ids(self, s):
        """
        matching based on slightly modified expression taken from there:
        https://github.com/fedora-infra/bodhi/blob/5.3/bodhi/server/config.py

        Examples:
        Fixes: rhbz#11111
        Fix:  rh#22222
        resolves:rhbz#33333, rhbz#44444 rh#55555
        close: fedora#6666
        fix:epel#77777
        """
        # matches one Bugzilla bug ID (in case there are more IDs with one common prefix)
        id_pattern_raw = r'(?:fedora|epel|rh(?:bz)?)#(\d{5,})'
        bz_pattern = re.compile(
            # says: there is at least one complete (including prefix) Bugzilla bug occurrence
            r'(?:fix(?:es)?|close(?:s)?|resolve(?:s)?)(?::|:\s+|\s+)' + id_pattern_raw,
            re.IGNORECASE,
        )
        id_pattern = re.compile(id_pattern_raw, re.IGNORECASE)

        # is there complete Bugzilla ID including prefix
        bz_match = bz_pattern.match(s)
        if bz_match is not None:
            # gather all Bugzilla IDs behind the prefix
            issue_ids = re.findall(id_pattern, s)
            return(sorted(issue_ids))

        return []

    def _get_fixed_issues(self, commit):
        """Get fixed issue or bug IDs from commit message body

        Both patterns matching pagure issue and Bugzilla bug are supported.
        Examples,

        Fix #1234
        Fixes: #11234
        Fixes: #11234 #9283
        Bug 123456
        Bug BZ123456 RHBZ123456
        """
        body = self._getCommitDetail(commit, "%b")
        ids = None
        for line in body:
            ids = self._extract_issue_ids(line)
            if ids:
                break
        return ids

    def getLog(self):
        if not self.name:
            range = "%s.." % (self.version)
        else:
            range = "%s-%s.." % (self.name, self.version)
        proc = subprocess.Popen(['git', 'log', '--pretty=oneline', '--no-merges', range],
                                universal_newlines=True,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE).communicate()
        lines = filter(lambda x: x.find('l10n: ') != 41 and
                       x.find('Merge commit') != 41 and
                       x.find('Merge branch') != 41,
                       proc[0].strip('\n').split('\n'))

        if self.ignore and self.ignore != '':
            for commit in self.ignore.split(','):
                lines = filter(lambda x: not x.startswith(commit), lines)

        log = []
        for line in lines:
            fields = line.split(' ')
            commit = fields[0]

            summary = self._getCommitDetail(commit, "%s")
            author = self._getCommitDetail(commit, "%aE")
            issue_ids = self._get_fixed_issues(commit)

            if issue_ids:
                log.append(("%s - %s (%s)" % (summary.strip(), ' '.join(issue_ids), author)))
            else:
                log.append(("%s (%s)" % (summary.strip(), author)))

        return log

    def formatLog(self):
        s = ""
        for msg in self.getLog():
            sublines = textwrap.wrap(msg, 77)
            s = s + "- %s\n" % sublines[0]

            if len(sublines) > 1:
                for subline in sublines[1:]:
                    s = s + "  %s\n" % subline

        return s


def main():
    parser = ArgumentParser()
    parser.add_argument("-n", "--name",
                        help="Name of package used in tags")
    parser.add_argument("-v", "--version",
                        help="Last version, changelog is commits after this tag")
    args = parser.parse_args()

    cl = ChangeLog(args.name, args.version)
    print(cl.formatLog())


if __name__ == "__main__":
    main()
